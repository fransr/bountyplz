#!/bin/bash

_bin_path="$(dirname $(realpath "$0"))"

source "${_bin_path}/.env"

set -euo pipefail

_user_agent="User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"
_accept_lang="Accept-Language: en-US,en;q=0.9,sv;q=0.8,zh-TW;q=0.7,zh;q=0.6,fi;q=0.5,it;q=0.4,de;q=0.3"

die () {
	echo >&2 "$@"
	exit 1
}

which curl > /dev/null || die 'error: you need curl'
which jq > /dev/null || die 'error: you need jq'

_sed_bin=$(which gsed || which sed)
_tac_bin=$(which gtac || which tac)
[ "${_tac_bin}" != "" ] || die 'error: you need tac'
[ "${_sed_bin}" != "" ] || die 'error: you need sed'

urlencode () {
	echo -n "${1}" | curl -Gso /dev/null -w %{url_effective} --data-urlencode @- "" | cut -c 3- || echo ""
}

. "${_bin_path}/h1" # include h1-specific functions
. "${_bin_path}/bc" # include bugcrowd-specific functions

_version="1.1"
_command="${1-help}"

report_args () {
	while [ $# -gt 1 ]; do
		case "$2" in
		--preview|-p)
			_preview="1"
		;;
		--draft|-d)
			_draft="1"
		;;
		--scope)
			_scope="1"
		;;
		--force|-f)
			_force="1"
		;;
		*)
			# two routes, either we have file only and preview
			# or we have program and file (both with or without preview)
			if [ "${3:-}" == "" ] && [ "${_program}" == "" ] && [ "${_preview}" == "1" ]; then
				# only one arg excluding flags, allow if draft
				_program=":preview-only:"
			fi

			if [ "${_program}" == "" ]; then
				_program="${2:-}"
			else
				_report_file="${2:-}"
			fi

		;;
		esac
		shift
	done
	[ "${_program}" != "" ] || doc_error "program not found"
	if [ "${_report_file}" != "" ] && [ "${_scope}" = "" ]; then doc_error "report file not found"; fi
}

trim () {
	echo "${1}" | ${_tac_bin} | ${_sed_bin} -e '/./,$!d' | ${_tac_bin} | ${_sed_bin} -e '/./,$!d'
}

frontmatter_parse () {
	echo "${1}" | ${_sed_bin} -n "/^${2}:/Ip" | cut -d ":" -f 2- | awk '{$1=$1};1' | ${_sed_bin} -e $'s/^[\'"]//' -e $'s/[\'"]$//'
}

report_tag_attachments() {
	_file_dir=$(dirname "${_report_file}")

	for i in $(echo "${_attachments}" | jq -r '.[]')
	do
		[ ! -f "${_file_dir}/${i}" ] && doc_error "inline attachment not found: ${_file_dir}/${i}"
	done

	_found=1
	_key=1
	while [ "${_found}" != "" ]; do
		_found=$(echo "${_report}" | grep -m1 -Eo "<img upload[^>]*>|<video upload[^>]*>" | head -n 1 || echo "")
		[ "${_found}" == "" ] && break;
		_found_src=$(echo "${_found}" | ${_sed_bin} -r -n $'/src/s/.*src=["\']?([^"\'>]+).*/\\1/p')
		[ ! -f "${_file_dir}/${_found_src}" ] && doc_error "inline attachment not found: ${_file_dir}/${_found_src}"
		_files+=("${_found_src}")
		_file_keys+=("${_key}")
		_report=$(echo "${_report}" | ${_sed_bin} -r -e "0,/<(img|video) upload[^>]*>/ s//{UPLOAD${_key}}/"); 
		_key=$(($_key + 1))
	done
}

parse () {
	doc_action "parsing ${_report_file}..."

	[ ! -f "${1}" ] && doc_error "report file not found: ${1}"
	
	#setup file arrays if needed
	_files=()
	_file_keys=()

	# extract frontmatter from file
	_frontmatter=$(${_sed_bin} -n -e '1 { /^---/ { :a N; /\n---/! ba; p} }' "${1}")

	# check if already reported
	_report_ref=$(frontmatter_parse "${_frontmatter}" "report")

	[ "${_report_ref}" != "" ] && [ "${_force}" == "" ] \
		&& [ "${_preview}" == "" ] \
		&& [ "${_draft}" == "" ] \
		&& doc_action "already reported: ${_report_ref}, ignoring" && exit 0

	# extract all but frontmatter from file
	_report=$(${_sed_bin} '1 { /^---/ { :a N; /\n---/! ba; d} }' "${1}")
	#fetch first #-header in the markdown as title

	_title=$(echo "${_report}" | grep -m1 -E '^#[ ]' | head -n 1 || echo "")
	_title=$(echo "${_title}" | ${_sed_bin} -e 's/^#[ ]//')

	# remove first #-header from description
	_report=$(trim "$(echo "${_report}" | ${_sed_bin} '0,/#[ ]/{//d;}')")

	# parse a bunch of tags in the frontmatter
	_asset=$(frontmatter_parse "${_frontmatter}" "asset")
	_attachments=$(frontmatter_parse "${_frontmatter}" "attachments")
	#validate attachments
	if [ "${_attachments}" != "" ]; then
		_attachments=$(echo "${_attachments}" | jq -c '.')
		if [ "${_attachments}" == "" ]; then
			doc_error "invalid attachments"
		fi
	fi
	_attachment_count=$(echo "${_attachments}" | jq 'length')

	_weakness=$(frontmatter_parse "${_frontmatter}" "weakness")
	_severity=$(frontmatter_parse "${_frontmatter}" "severity")
	_url=$(frontmatter_parse "${_frontmatter}" "url")

	_impact="" # will be filled if needed

	# at this point, the whole report is in $_report
	# we will now divide it into desc and impact
	report_tag_attachments

	_attachment_count=$(($_attachment_count + $(($_key - 1))))

	[ "${_title}" != "" ] || doc_error "title not found"
}

mark_report_done() {
	_report_data="${1}"
	if [ "${_report_ref}" != "" ] && [ "${_force}" != "" ]; then
		# old report in there, remove first
		doc_action "remove old report reference"
		${_sed_bin} -i '0,/report: /{//d;}' "${_report_file}"
	fi
	doc_action "marking report as done"
	${_sed_bin} -i "0,/---/a report: ${_report_data}" "${_report_file}"
}

preview () {
	# either show report or description
	echo "--- description:"
	[ "${_report}" != "" ] && doc_report "${_report}" || doc_report "${_description}"
	[ "${_impact}" != "" ] && echo "--- impact:" && doc_report "${_impact}"
	echo "--- attributes:"
	doc_attr "title:" "${_title}"
	[ "${_report_ref}" != "" ] && doc_attr "report:" "${_report_ref}"
	doc_attr "program:" "${_program}"
	doc_attr "weakness:" "${_weakness}"
	[ "${_attachments}" != "" ] && doc_attr "attachments:" "$(echo "${_attachments}" | jq -r '.[]' | tr '\n\r' ',' | ${_sed_bin} -r 's/(^,|,$)//')"
	[ "${#_files[@]}" -gt 0 ] && doc_attr "inline-attachments:" $(IFS=, ; echo "${_files[*]}")
	[ "${_url}" != "" ] && doc_attr "url:" "${_url}"
	[ "${_severity}" != "" ] && doc_attr "severity:" "${_severity}"
	[ "${_asset}" != "" ] && doc_attr "asset:" "${_asset}"
	echo "---"
}

curl_parse() {
	_response_headers=$(echo "$1" | tr -d "\r" | ${_sed_bin} "/^\s*$(printf '\r')*$/q" || true)
	_response_code=$(echo "${_response_headers}" | head -n 1 | cut -d " " -f2)
	_response_body=$(echo "$1" | ${_sed_bin} "1,/^\s*$(printf '\r')*$/d" || true)
}

list_selector() {
	_list_id=""
	_name="$1"
	_fulldata="$2"
	_check="$3"
	_select_pattern="$4"
	_list_pattern="$5"
	_id_pattern="$6"
	_direct_match_pattern="$7"

	_data="$(echo "${_fulldata}" | jq --arg w "${_check}" "${_select_pattern}")"

	_count=$(echo "${_data}" | jq 'length')
	_fullcount=$(echo "${_fulldata}" | jq --arg w "" "${_select_pattern}" | jq 'length')

	if [ "${_fullcount}" == "0" ]; then
		doc_action "no ${_name} exists, ignoring"
		return
	fi

	if [ "${_count}" != "1" ]; then
		if [ "${_count}" -lt 1 ]; then
			doc_action "${_name} not found"
			_data="$(echo "${_fulldata}" | jq --arg w "" "${_select_pattern}")"

			#doc_error "${_name} not found"
		fi
		doc_select "multiple found, select ${_name}"
		doc_select "$(echo "${_data} " | jq -r "${_list_pattern}")"
		echo -n "enter ${_name} id: "
		read _list_id
		_list_id=$(echo "${_list_id}" | ${_sed_bin} 's/[^0-9]*//g')
		[ "${_list_id}" == "" ] && doc_error "error: no ${_name} selected"
		_list_id=$(echo "${_data}" | jq -r --arg w_id "${_list_id}" "${_id_pattern}")
	else
		_list_id=$(echo "${_data}" | jq -r "${_direct_match_pattern}")
	fi

	if [ "${_list_id}" == "" ]; then
		doc_action "${_name} not found"
	else
		doc_success "${_name} ${_list_id} selected"
	fi
}

doc () { printf '%-30s \e[38;5;22m%s\e[m\n' "${1:-}" "${2:-}"; }
doc_attr () { printf '\033[35m%s\033[0m \e[37m%s\e[m\n' "${1:-}" "${2:-}"; }
doc_report () { printf '\033[33m%s\e[0m\n' "${1}"; }
doc_action () { printf '\033[32m*** %s\e[0m\n' "${1}"; }
doc_success () { printf '\033[36m*** %s\e[0m\n' "${1}"; }
doc_notice () { printf '\033[35m*** %s\e[0m\n' "${1}"; }
doc_select () { printf '\033[35m%s\e[0m\n' "$(echo "${1}" | ${_sed_bin} 's/^/   /')"; }
doc_error() { printf '\033[31m### %s\e[0m\n' "${1}"; die; }

case ${_command} in
version)
	echo "v${_version}"
;;
help)
	echo ''
	echo "bountyplz v${_version}"
	echo ''
	doc 'help' 'this list of help'
	doc 'version' 'show version'
	echo ''
	doc 'h1 <program> <markdown-file>' 'submit report to a hackerone program'
	doc 'bc <program> <markdown-file>' 'submit report to a bugcrowd program'
	doc '  -p to preview only'
	doc '  -d to save draft only (will only save on hackerone)'
	doc '  -f to force report (ignore being already reported)'
	echo ''
	doc 'h1 -p <markdown-file>' 'to only preview the parsing of the file for hackerone'
	doc 'bc -p <markdown-file>' 'to only preview the parsing of the file for bugcrowd'
	echo ''
	doc 'h1 <program> --scope' 'fetches assets in scope (h1 only)'
	echo ''
;;
h1)
	h1_init "$@"
	if [ "${_scope}" == "1" ]; then
		#echo "Domains in scope:"
		h1_api "current_user"
		_signed_in=$(echo "${_user_info}" | jq $'.["signed_in?"]')
		_csrf_token=$(echo "${_user_info}" | jq -r $'.["csrf_token"]')
		if [ "${_signed_in}" == "false" ]; then
			h1_api "sign-in"
		else
			doc_success "already signed in!"
		fi
		_csrf_token=$(echo "${_user_info}" | jq -r $'.["csrf_token"]')
		h1_api "scope"
		exit 0
	fi

	h1_parse "${_report_file}"
	h1_preview
	if [ "${_preview}" != "1" ]; then
		doc_action "sending report..."
		#check if signed in
		h1_api "current_user"
		_signed_in=$(echo "${_user_info}" | jq $'.["signed_in?"]')
		_csrf_token=$(echo "${_user_info}" | jq -r $'.["csrf_token"]')
		if [ "${_signed_in}" == "false" ]; then
			h1_api "sign-in"
		else
			doc_success "already signed in!"
		fi
		_csrf_token=$(echo "${_user_info}" | jq -r $'.["csrf_token"]')

		h1_api "validate-program"
		h1_api "report-attributes"
		h1_api "upload-files"
		h1_api "report-draft"
		if [ "${_draft}" != "1" ]; then
			h1_api "report-send"
			doc_success "report submitted: ${_report_id}"
			doc_success "${_report_ref}"
		fi
	fi
;;
bc)
	bc_init "$@"
	bc_parse "${_report_file}"
	bc_preview
	if [ "${_preview}" != "1" ]; then
		doc_action "sending report..."
		#check if signed in
		bc_api "current_user"
		if [ "${_signed_in}" == "false" ]; then
			_csrf_token=$(echo "${_user_info}" | grep -oE '"authenticity_token" value="[^"]+"' | cut -d '"' -f 4)
			bc_api "sign-in"
		else
			doc_success "user is signed in"
		fi
		bc_api "validate-program"
		_csrf_token=$(echo "${_user_info}" | grep -oE '"authenticity_token" value="[^"]+"' | cut -d '"' -f 4)
		bc_api "report-attributes"
		bc_api "upload-files"
		if [ "${_draft}" != "1" ]; then
			bc_api "report-send"
			doc_success "report submitted: ${_report_id}"
			doc_success "${_report_ref}"
		else
			doc_action "no draft be saved on bugcrowd, exit"
		fi
	fi
;;
*)
	die "Unknown command"
;;
esac
